<?php

namespace core;
use Valitron\Validator;
use Illuminate\Support\Facades\Hash;
abstract class Model extends \Illuminate\Database\Eloquent\Model
{
    protected array $loaded = [];
    protected $fillable = [];
    public $attributes = [];
    protected array $rules = [];
    protected array $errors = [];

    public function save(array $options = [])
    {
        foreach ($this->attributes as $key => $value) {
            if(!in_array($key, $this->fillable)) {
                unset($this->attributes[$key]);
            }
        }
                return parent::save($options); // TODO: Change the autogenerated stub
    }

    public function loadData(): void
    {
        $data = request()->getData();
        foreach ($this->loaded as $field) {
            if (isset($data[$field])) {
                $this->attributes[$field] = $data[$field];
            } else {
                $this->attributes[$field] = '';
            }
        }
    }
    public function validate($data = [],$rules = []): bool
    {
        if(!$data){
            $data = $this->attributes;
        }
        if(!$rules) {
            $rules = $this->rules;
        }

//
//        Validator::addRule('unique', function($field, $value, array $params, array $fields) {
//            $data = explode(',', $params[0]);
//             return !(db()->findOne($data[0],$value,$dat[1]));
//            dd($field, $value, $params, $data);
//            return false;
//        }, 'This email is already registered.');
//        Validator::langDir('/lang');
//        Validator::lang('ar');
        Validator::addRule('unique', function ($field, $value, array $params, array $fields) {
            $table = $params[0];
            $column = $params[1];
            return !\Illuminate\Support\Facades\DB::table($table)->where($column, $value)->exists();
        }, 'This value already exists.');
        $valitador = new Validator($data);
        $valitador->rules($rules);
        $valitador->errors();
        if($valitador->validate()){
            return true;
        }else{
            $this->errors = $valitador->errors();
            return false;
        }
    }
    public function getErrors(): array
    {
        return $this->errors;
    }
}